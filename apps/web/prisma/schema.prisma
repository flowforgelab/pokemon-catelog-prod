// This file is required for Prisma to work correctly on Vercel
// It references the main schema from the database package

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Re-export all models from the main schema
// This is a workaround for Vercel deployment
model User {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  email         String       @unique
  name          String?
  username      String?      @unique
  password      String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
  accounts      Account[]
  collections   Collection[]
  decks         Deck[]
  following     Follow[]     @relation("Following")
  followers     Follow[]     @relation("Followers")
  priceAlerts   PriceAlert[]
  sessions      Session[]
  trades        Trade[]
}

model Account {
  id                String  @id @default(dbgenerated("gen_random_uuid()"))
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Minimal other models to satisfy relations
model Collection {
  id     String @id @default(dbgenerated("gen_random_uuid()"))
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Deck {
  id     String @id @default(dbgenerated("gen_random_uuid()"))
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Follow {
  id          String @id @default(dbgenerated("gen_random_uuid()"))
  followerId  String
  followingId String
  follower    User   @relation("Followers", fields: [followerId], references: [id])
  following   User   @relation("Following", fields: [followingId], references: [id])
}

model PriceAlert {
  id     String @id @default(dbgenerated("gen_random_uuid()"))
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Trade {
  id     String @id @default(dbgenerated("gen_random_uuid()"))
  userId String
  user   User   @relation(fields: [userId], references: [id])
}
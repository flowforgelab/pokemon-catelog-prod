generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")      // Pooled connection
  directUrl = env("DIRECT_URL")        // Direct connection for migrations
}

model User {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  email         String       @unique
  name          String?
  username      String?      @unique
  password      String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
  accounts      Account[]
  collections   Collection[]
  decks         Deck[]
  following     Follow[]     @relation("Following")
  followers     Follow[]     @relation("Followers")
  priceAlerts   PriceAlert[]
  sessions      Session[]
  trades        Trade[]
}

model Account {
  id                String  @id @default(dbgenerated("gen_random_uuid()"))
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Card {
  id                     String           @id @default(dbgenerated("gen_random_uuid()"))
  tcgId                  String           @unique
  name                   String
  supertype              String
  subtypes               String[]
  types                  String[]
  hp                     Int?
  retreatCost            String[]
  number                 String
  artist                 String?
  rarity                 String?
  flavorText             String?
  setId                  String
  setName                String
  setLogo                String?
  setSeries              String
  setPrintedTotal        Int
  setTotal               Int
  setReleaseDate         DateTime
  imageSmall             String
  imageLarge             String
  nationalPokedexNumbers Int[]
  rules                  String[]
  ancientTrait           Json?
  abilities              Json[]
  attacks                Json[]
  weaknesses             Json[]
  resistances            Json[]
  standardLegal          Boolean          @default(false)
  expandedLegal          Boolean          @default(false)
  unlimitedLegal         Boolean          @default(true)
  competitiveRating      Int?
  competitiveNotes       String?
  tcgplayerUrl           String?
  cardmarketUrl          String?
  marketPrice            Float?
  animeEra               String?
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @default(now()) @updatedAt
  collections            CollectionCard[]
  deckCards              DeckCard[]
  priceAlerts            PriceAlert[]
  priceHistory           PriceHistory[]

  @@index([name])
  @@index([setId])
  @@index([types])
  @@index([rarity])
  @@index([marketPrice])
  @@index([animeEra])
}

model Collection {
  id          String           @id @default(dbgenerated("gen_random_uuid()"))
  userId      String
  name        String
  description String?
  isPublic    Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now()) @updatedAt
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  cards       CollectionCard[]

  @@index([userId])
}

model CollectionCard {
  id             String     @id @default(dbgenerated("gen_random_uuid()"))
  collectionId   String
  cardId         String
  quantity       Int        @default(1)
  condition      String     @default("NM")
  language       String     @default("EN")
  isFirstEdition Boolean    @default(false)
  isFoil         Boolean    @default(false)
  notes          String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now()) @updatedAt
  card           Card       @relation(fields: [cardId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  collection     Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([collectionId, cardId, condition, language, isFirstEdition, isFoil], map: "CollectionCard_unique")
  @@index([collectionId])
  @@index([cardId])
}

model Deck {
  id          String        @id @default(dbgenerated("gen_random_uuid()"))
  userId      String
  name        String
  description String?
  format      String
  isPublic    Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  cards       DeckCard[]
  analyses    DeckAnalysis[]

  @@index([userId])
  @@index([format])
}

model DeckAnalysis {
  id               String   @id @default(dbgenerated("gen_random_uuid()"))
  deckId           String
  strategy         String   // 'aggro', 'control', 'combo', 'midrange'
  consistencyScore Int      // 0-100
  energyCurve      Json     // [count_by_cost]
  recommendations  Json     // array of recommendation strings
  warnings         Json     // array of warning strings
  createdAt        DateTime @default(now())
  deck             Deck     @relation(fields: [deckId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([deckId])
  @@index([createdAt])
}

model DeckCard {
  id       String @id @default(dbgenerated("gen_random_uuid()"))
  deckId   String
  cardId   String
  quantity Int    @default(1)
  card     Card   @relation(fields: [cardId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  deck     Deck   @relation(fields: [deckId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([deckId, cardId])
  @@index([deckId])
  @@index([cardId])
}

model PriceHistory {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  cardId      String
  source      String
  condition   String
  marketPrice Float?
  lowPrice    Float?
  midPrice    Float?
  highPrice   Float?
  directLow   Float?
  recordedAt  DateTime @default(now())
  card        Card     @relation(fields: [cardId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([cardId, source, recordedAt])
  @@index([cardId, recordedAt(sort: Desc)])
}

model PriceAlert {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  userId      String
  cardId      String
  condition   String   @default("NM")
  targetPrice Float
  alertType   String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  card        Card     @relation(fields: [cardId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId])
  @@index([cardId])
}

model Trade {
  id          String      @id @default(dbgenerated("gen_random_uuid()"))
  userId      String
  title       String
  description String?
  status      String      @default("open")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  haveCards   TradeCard[] @relation("HaveCards")
  wantCards   TradeCard[] @relation("WantCards")

  @@index([userId])
  @@index([status])
}

model TradeCard {
  id         String  @id @default(dbgenerated("gen_random_uuid()"))
  cardId     String
  quantity   Int     @default(1)
  condition  String  @default("NM")
  haveTrades Trade[] @relation("HaveCards")
  wantTrades Trade[] @relation("WantCards")
}

model Follow {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  following   User     @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}
